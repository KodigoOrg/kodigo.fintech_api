classDiagram
    %% Entidades principales
    class Usuario {
        -UUID id
        -String email
        -String nombre
        -String password
        -Role role
        -LocalDateTime creadoEn
        +getId() UUID
        +getEmail() String
        +setEmail(String)
        +getNombre() String
        +setNombre(String)
        +getPassword() String
        +setPassword(String)
        +getRole() Role
        +setRole(Role)
        +getCreadoEn() LocalDateTime
        +getAuthorities() Collection<GrantedAuthority>
        +getUsername() String
        +isAccountNonExpired() boolean
        +isAccountNonLocked() boolean
        +isCredentialsNonExpired() boolean
        +isEnabled() boolean
    }

    class Movimiento {
        -UUID id
        -Usuario usuario
        -Categoria categoria
        -TipoMov tipo
        -BigDecimal monto
        -String descripcion
        -LocalDate ocurridoEn
        -LocalDateTime creadoEn
        -LocalDateTime actualizadoEn
        +getId() UUID
        +getUsuario() Usuario
        +setUsuario(Usuario)
        +getCategoria() Categoria
        +setCategoria(Categoria)
        +getTipo() TipoMov
        +setTipo(TipoMov)
        +getMonto() BigDecimal
        +setMonto(BigDecimal)
        +getDescripcion() String
        +setDescripcion(String)
        +getOcurridoEn() LocalDate
        +setOcurridoEn(LocalDate)
        +getCreadoEn() LocalDateTime
        +getActualizadoEn() LocalDateTime
        +setActualizadoEn(LocalDateTime)
    }

    class Categoria {
        -UUID id
        -String nombre
        -TipoMov tipo
        +getId() UUID
        +getNombre() String
        +setNombre(String)
        +getTipo() TipoMov
        +setTipo(TipoMov)
    }

    class Presupuesto {
        -UUID id
        -Usuario usuario
        -Categoria categoria
        -String periodo
        -BigDecimal monto
        -LocalDateTime creadoEn
        +getId() UUID
        +getUsuario() Usuario
        +setUsuario(Usuario)
        +getCategoria() Categoria
        +setCategoria(Categoria)
        +getPeriodo() String
        +setPeriodo(String)
        +getMonto() BigDecimal
        +setMonto(BigDecimal)
    }

    class Alerta {
        -UUID id
        -Presupuesto presupuesto
        -LocalDateTime generadoEn
        -String mensaje
        -BigDecimal sobrepeso
        -Boolean atendido
        +getId() UUID
        +getPresupuesto() Presupuesto
        +setPresupuesto(Presupuesto)
        +getGeneradoEn() LocalDateTime
        +getMensaje() String
        +setMensaje(String)
        +getSobrepeso() BigDecimal
        +setSobrepeso(BigDecimal)
        +getAtendido() Boolean
        +setAtendido(Boolean)
    }

    class TipoMov {
        <<enumeration>>
        INGRESO
        EGRESO
        IMPUESTO
    }

    class Role {
        <<enumeration>>
        USER
        ADMIN
    }

    %% DTOs
    class UsuarioDTO {
        -String email
        -String nombre
        -String password
    }

    class LoginDTO {
        -String email
        -String password
    }

    class AuthResponseDTO {
        -String token
    }

    class MovimientoDTO {
        -UUID usuarioId
        -UUID categoriaId
        -TipoMov tipo
        -BigDecimal monto
        -String descripcion
        -LocalDate ocurridoEn
    }

    class CategoriaDTO {
        -String nombre
        -TipoMov tipo
    }

    class PresupuestoDTO {
        -UUID categoriaId
        -String periodo
        -BigDecimal monto
    }

    class AlertaDTO {
        -UUID presupuestoId
        -String mensaje
        -BigDecimal sobrepeso
        -Boolean atendido
    }

    %% Repositorios
    class UsuarioRepository {
        <<interface>>
        +findById(UUID) Optional<Usuario>
        +findByEmail(String) Optional<Usuario>
        +save(Usuario) Usuario
        +deleteById(UUID) void
        +existsById(UUID) boolean
    }

    class MovimientoRepository {
        <<interface>>
        +findById(UUID) Optional<Movimiento>
        +findAll() List<Movimiento>
        +save(Movimiento) Movimiento
        +deleteById(UUID) void
        +existsById(UUID) boolean
    }

    class CategoriaRepository {
        <<interface>>
        +findById(UUID) Optional<Categoria>
        +findAll() List<Categoria>
        +save(Categoria) Categoria
        +deleteById(UUID) void
        +existsById(UUID) boolean
    }

    class PresupuestoRepository {
        <<interface>>
        +findById(UUID) Optional<Presupuesto>
        +findAll() List<Presupuesto>
        +save(Presupuesto) Presupuesto
        +deleteById(UUID) void
        +existsById(UUID) boolean
    }

    class AlertaRepository {
        <<interface>>
        +findById(UUID) Optional<Alerta>
        +findAll() List<Alerta>
        +save(Alerta) Alerta
        +deleteById(UUID) void
        +existsById(UUID) boolean
    }

    %% Controladores
    class UsuarioController {
        -UsuarioRepository usuarioRepository
        +create(UsuarioDTO) ResponseEntity<Usuario>
        +list() ResponseEntity<List<Usuario>>
        +get(UUID) ResponseEntity<Usuario>
        +update(UUID, UsuarioUpdateDTO) ResponseEntity<Usuario>
        +delete(UUID) ResponseEntity<Void>
    }

    class AuthController {
        -AuthenticationService authenticationService
        +login(LoginDTO) ResponseEntity<AuthResponseDTO>
        +register(UsuarioDTO) ResponseEntity<AuthResponseDTO>
    }

    class MovimientoController {
        -MovimientoRepository movimientoRepository
        -UsuarioRepository usuarioRepository
        -CategoriaRepository categoriaRepository
        +create(MovimientoDTO) ResponseEntity<Movimiento>
        +list() ResponseEntity<List<Movimiento>>
        +get(UUID) ResponseEntity<Movimiento>
        +update(UUID, MovimientoDTO) ResponseEntity<Movimiento>
        +delete(UUID) ResponseEntity<Void>
    }

    class CategoriaController {
        -CategoriaRepository categoriaRepository
        +create(CategoriaDTO) ResponseEntity<Categoria>
        +list() ResponseEntity<List<Categoria>>
        +get(UUID) ResponseEntity<Categoria>
        +update(UUID, CategoriaDTO) ResponseEntity<Categoria>
        +delete(UUID) ResponseEntity<Void>
    }

    class PresupuestoController {
        -PresupuestoRepository presupuestoRepository
        -UsuarioRepository usuarioRepository
        -CategoriaRepository categoriaRepository
        +create(PresupuestoDTO) ResponseEntity<Presupuesto>
        +list() ResponseEntity<List<Presupuesto>>
        +get(UUID) ResponseEntity<Presupuesto>
        +update(UUID, PresupuestoDTO) ResponseEntity<Presupuesto>
        +delete(UUID) ResponseEntity<Void>
    }

    class AlertaController {
        -AlertaRepository alertaRepository
        -PresupuestoRepository presupuestoRepository
        +create(AlertaDTO) ResponseEntity<Alerta>
        +list() ResponseEntity<List<Alerta>>
        +get(UUID) ResponseEntity<Alerta>
        +update(UUID, AlertaDTO) ResponseEntity<Alerta>
        +delete(UUID) ResponseEntity<Void>
    }

    %% Servicios
    class JwtService {
        -String secretKey
        -long jwtExpiration
        +extractUsername(String) String
        +extractClaim(String, Function) T
        +generateToken(UserDetails) String
        +generateToken(Map, UserDetails) String
        +isTokenValid(String, UserDetails) boolean
        -buildToken(Map, UserDetails, long) String
        -isTokenExpired(String) boolean
        -extractExpiration(String) Date
        -extractAllClaims(String) Claims
        -getSignInKey() Key
    }

    class AuthenticationService {
        -UsuarioRepository usuarioRepository
        -JwtService jwtService
        -PasswordEncoder passwordEncoder
        +authenticate(LoginDTO) AuthResponseDTO
        +register(UsuarioDTO) AuthResponseDTO
        -generateToken(Usuario) String
    }

    class CustomUserDetailsService {
        -UsuarioRepository usuarioRepository
        +loadUserByUsername(String) UserDetails
    }

    %% Configuración
    class SecurityConfig {
        -JwtAuthenticationFilter jwtAuthFilter
        -CustomUserDetailsService userDetailsService
        +configure(HttpSecurity) void
        +configure(AuthenticationManagerBuilder) void
        +authenticationProvider() AuthenticationProvider
        +authenticationManager(AuthenticationConfiguration) AuthenticationManager
        +passwordEncoder() PasswordEncoder
    }

    class JwtAuthenticationFilter {
        -JwtService jwtService
        -CustomUserDetailsService userDetailsService
        +doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) void
        -getJwtFromRequest(HttpServletRequest) String
        -getUsernameFromToken(String) String
    }

    class CorsConfig {
        +corsConfigurationSource() CorsConfigurationSource
    }

    %% Excepciones
    class GlobalExceptionHandler {
        +handleEntityNotFoundException(EntityNotFoundException) ResponseEntity<Map>
        +handleValidationException(MethodArgumentNotValidException) ResponseEntity<Map>
        +handleGenericException(Exception) ResponseEntity<Map>
    }

    %% Relaciones entre entidades
    Usuario ||--o{ Movimiento : "tiene"
    Usuario ||--o{ Presupuesto : "tiene"
    Categoria ||--o{ Movimiento : "categoriza"
    Categoria ||--o{ Presupuesto : "categoriza"
    Presupuesto ||--o{ Alerta : "genera"
    Usuario ||--o{ Categoria : "puede crear"

    %% Relaciones de implementación
    Usuario ..|> UserDetails : implements
    UsuarioRepository ..|> JpaRepository : extends
    MovimientoRepository ..|> JpaRepository : extends
    CategoriaRepository ..|> JpaRepository : extends
    PresupuestoRepository ..|> JpaRepository : extends
    AlertaRepository ..|> JpaRepository : extends

    %% Relaciones de composición
    UsuarioController --> UsuarioRepository : uses
    AuthController --> AuthenticationService : uses
    MovimientoController --> MovimientoRepository : uses
    MovimientoController --> UsuarioRepository : uses
    MovimientoController --> CategoriaRepository : uses
    CategoriaController --> CategoriaRepository : uses
    PresupuestoController --> PresupuestoRepository : uses
    PresupuestoController --> UsuarioRepository : uses
    PresupuestoController --> CategoriaRepository : uses
    AlertaController --> AlertaRepository : uses
    AlertaController --> PresupuestoRepository : uses

    %% Relaciones de servicios
    AuthenticationService --> UsuarioRepository : uses
    AuthenticationService --> JwtService : uses
    CustomUserDetailsService --> UsuarioRepository : uses
    SecurityConfig --> JwtAuthenticationFilter : uses
    SecurityConfig --> CustomUser DetailsService : uses
    JwtAuthenticationFilter --> JwtService : uses
    JwtAuthenticationFilter --> CustomUser DetailsService : uses

    %% Enumeraciones
    Usuario --> Role : uses
    Movimiento --> TipoMov : uses
    Categoria --> TipoMov : uses
